-- DELTA X AZURE UI LIB
-- GitHub: https://github.com/WAVA094/d

local DeltaXAzure = {}

-- Сервисы
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

-- Локальный игрок
local player = Players.LocalPlayer
local gui = player:WaitForChild("PlayerGui")

-- Основной ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "DeltaXAzureUI"
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = gui

-- Тема
DeltaXAzure.Theme = {
    MainColor = Color3.fromRGB(25, 25, 35),
    SecondaryColor = Color3.fromRGB(35, 35, 45),
    AccentColor = Color3.fromRGB(0, 150, 255),
    TextColor = Color3.fromRGB(255, 255, 255),
    DarkText = Color3.fromRGB(180, 180, 180),
    Font = Enum.Font.Gotham,
    CornerRadius = UDim.new(0, 4)
}

-- Вспомогательные функции
function DeltaXAzure:Create(class, properties)
    local obj = Instance.new(class)
    for prop, value in pairs(properties) do
        obj[prop] = value
    end
    return obj
end

function DeltaXAzure:CreateFrame(parent, size, position, color, transparency)
    local frame = self:Create("Frame", {
        BackgroundColor3 = color or self.Theme.MainColor,
        BackgroundTransparency = transparency or 0,
        Size = size,
        Position = position,
        Parent = parent
    })
    
    local corner = self:Create("UICorner", {
        CornerRadius = self.Theme.CornerRadius,
        Parent = frame
    })
    
    return frame
end

function DeltaXAzure:CreateLabel(parent, text, size, position, textSize)
    local label = self:Create("TextLabel", {
        Text = text,
        TextColor3 = self.Theme.TextColor,
        BackgroundTransparency = 1,
        Size = size,
        Position = position,
        Font = self.Theme.Font,
        TextSize = textSize or 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = parent
    })
    
    return label
end

-- Основное окно
function DeltaXAzure:CreateWindow(title)
    local mainWindow = self:CreateFrame(ScreenGui, UDim2.new(0, 350, 0, 400), UDim2.new(0.5, -175, 0.5, -200))
    
    -- Title Bar (для перетаскивания)
    local titleBar = self:CreateFrame(mainWindow, UDim2.new(1, 0, 0, 30), UDim2.new(0, 0, 0, 0), self.Theme.SecondaryColor)
    local titleLabel = self:CreateLabel(titleBar, title, UDim2.new(1, -40, 1, 0), UDim2.new(0, 10, 0, 0), 16)
    
    -- Close Button
    local closeBtn = self:Create("TextButton", {
        Size = UDim2.new(0, 25, 0, 25),
        Position = UDim2.new(1, -30, 0.5, -12),
        BackgroundColor3 = Color3.fromRGB(255, 60, 60),
        Text = "×",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18,
        Font = Enum.Font.GothamBold,
        Parent = titleBar
    })
    
    self:Create("UICorner", {CornerRadius = UDim.new(0, 4), Parent = closeBtn})
    
    closeBtn.MouseButton1Click:Connect(function()
        mainWindow:Destroy()
    end)
    
    -- Перетаскивание окна
    local dragging = false
    local dragInput, dragStart, startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        mainWindow.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainWindow.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
    
    -- Content Area
    local content = self:CreateFrame(mainWindow, UDim2.new(1, -20, 1, -45), UDim2.new(0, 10, 0, 35), self.Theme.MainColor, 1)
    
    -- Tab System
    local tabs = {}
    local currentTab = nil
    local tabCount = 0
    
    function tabs:CreateTab(name)
        tabCount = tabCount + 1
        
        local tabButton = self:Create("TextButton", {
            Size = UDim2.new(0, 70, 0, 25),
            Position = UDim2.new(0, (tabCount - 1) * 75 + 10, 0, 5),
            BackgroundColor3 = self.Theme.SecondaryColor,
            Text = name,
            TextColor3 = self.Theme.DarkText,
            TextSize = 12,
            Font = self.Theme.Font,
            Parent = content
        })
        
        self:Create("UICorner", {CornerRadius = UDim.new(0, 4), Parent = tabButton})
        
        local tabContent = self:CreateFrame(content, UDim2.new(1, 0, 1, -35), UDim2.new(0, 0, 0, 35), self.Theme.MainColor, 1)
        tabContent.Visible = false
        
        local tabElements = {}
        
        function tabElements:Button(text, callback)
            local elementCount = #tabContent:GetChildren()
            local button = self:Create("TextButton", {
                Size = UDim2.new(1, -20, 0, 35),
                Position = UDim2.new(0, 10, 0, elementCount * 45 + 10),
                BackgroundColor3 = self.Theme.AccentColor,
                Text = text,
                TextColor3 = self.Theme.TextColor,
                TextSize = 14,
                Font = self.Theme.Font,
                Parent = tabContent
            })
            
            self:Create("UICorner", {CornerRadius = UDim.new(0, 4), Parent = button})
            
            button.MouseEnter:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(20, 130, 235)}):Play()
            end)
            
            button.MouseLeave:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = self.Theme.AccentColor}):Play()
            end)
            
            button.MouseButton1Click:Connect(function()
                if callback then
                    callback()
                end
            end)
            
            return button
        end
        
        function tabElements:Toggle(text, default, callback)
            local elementCount = #tabContent:GetChildren()
            local toggleFrame = self:CreateFrame(tabContent, UDim2.new(1, -20, 0, 30), UDim2.new(0, 10, 0, elementCount * 40 + 10), self.Theme.SecondaryColor)
            
            local toggleLabel = self:CreateLabel(toggleFrame, text, UDim2.new(0.7, 0, 1, 0), UDim2.new(0, 10, 0, 0))
            
            local toggleSwitch = self:CreateFrame(toggleFrame, UDim2.new(0, 40, 0, 20), UDim2.new(1, -50, 0.5, -10), Color3.fromRGB(60, 60, 70))
            
            local toggleDot = self:CreateFrame(toggleSwitch, UDim2.new(0, 16, 0, 16), UDim2.new(0, 2, 0, 2), self.Theme.TextColor)
            self:Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = toggleDot})
            
            local isToggled = default or false
            
            local function updateToggle()
                if isToggled then
                    TweenService:Create(toggleDot, TweenInfo.new(0.2), {Position = UDim2.new(0, 22, 0, 2)}):Play()
                    TweenService:Create(toggleSwitch, TweenInfo.new(0.2), {BackgroundColor3 = self.Theme.AccentColor}):Play()
                else
                    TweenService:Create(toggleDot, TweenInfo.new(0.2), {Position = UDim2.new(0, 2, 0, 2)}):Play()
                    TweenService:Create(toggleSwitch, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(60, 60, 70)}):Play()
                end
            end
            
            toggleFrame.MouseButton1Click:Connect(function()
                isToggled = not isToggled
                updateToggle()
                if callback then
                    callback(isToggled)
                end
            end)
            
            updateToggle()
            
            return {
                Set = function(self, value)
                    isToggled = value
                    updateToggle()
                end,
                Get = function(self)
                    return isToggled
                end
            }
        end
        
        function tabElements:Slider(text, min, max, default, callback)
            local elementCount = #tabContent:GetChildren()
            local sliderFrame = self:CreateFrame(tabContent, UDim2.new(1, -20, 0, 50), UDim2.new(0, 10, 0, elementCount * 55 + 10), self.Theme.SecondaryColor)
            
            local sliderLabel = self:CreateLabel(sliderFrame, text, UDim2.new(0.6, 0, 0, 20), UDim2.new(0, 10, 0, 5))
            
            local valueLabel = self:CreateLabel(sliderFrame, tostring(default), UDim2.new(0.3, 0, 0, 20), UDim2.new(0.7, -10, 0, 5))
            valueLabel.TextXAlignment = Enum.TextXAlignment.Right
            
            local track = self:CreateFrame(sliderFrame, UDim2.new(1, -20, 0, 6), UDim2.new(0, 10, 0, 30), Color3.fromRGB(50, 50, 60))
            self:Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = track})
            
            local fill = self:CreateFrame(track, UDim2.new(0, 0, 1, 0), UDim2.new(0, 0, 0, 0), self.Theme.AccentColor)
            self:Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = fill})
            
            local handle = self:CreateFrame(track, UDim2.new(0, 16, 0, 16), UDim2.new(0, -8, 0.5, -8), self.Theme.TextColor)
            self:Create("UICorner", {CornerRadius = UDim.new(1, 0), Parent = handle})
            
            local isDragging = false
            local currentValue = default or min
            
            local function updateSlider(value)
                local normalized = (value - min) / (max - min)
                local fillSize = math.clamp(normalized * track.AbsoluteSize.X, 0, track.AbsoluteSize.X)
                
                fill.Size = UDim2.new(0, fillSize, 1, 0)
                handle.Position = UDim2.new(0, fillSize - 8, 0.5, -8)
                valueLabel.Text = tostring(math.floor(value))
                currentValue = value
                
                if callback then
                    callback(value)
                end
            end
            
            local function onInput(input)
                if isDragging then
                    local relativeX = math.clamp(input.Position.X - track.AbsolutePosition.X, 0, track.AbsoluteSize.X)
                    local normalized = relativeX / track.AbsoluteSize.X
                    local value = min + normalized * (max - min)
                    updateSlider(math.floor(value))
                end
            end
            
            handle.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = true
                end
            end)
            
            handle.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = false
                end
            end)
            
            track.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = true
                    onInput(input)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement and isDragging then
                    onInput(input)
                end
            end)
            
            updateSlider(currentValue)
            
            return {
                Set = function(self, value)
                    updateSlider(math.clamp(value, min, max))
                end,
                Get = function(self)
                    return currentValue
                end
            }
        end
        
        function tabElements:Dropdown(text, options, callback)
            local elementCount = #tabContent:GetChildren()
            local dropdownFrame = self:CreateFrame(tabContent, UDim2.new(1, -20, 0, 35), UDim2.new(0, 10, 0, elementCount * 45 + 10), self.Theme.SecondaryColor)
            dropdownFrame.ClipsDescendants = true
            
            local dropdownLabel = self:CreateLabel(dropdownFrame, text, UDim2.new(0.7, 0, 1, 0), UDim2.new(0, 10, 0, 0))
            
            local dropdownArrow = self:CreateLabel(dropdownFrame, "▼", UDim2.new(0, 20, 0, 20), UDim2.new(1, -25, 0.5, -10), 12)
            dropdownArrow.TextXAlignment = Enum.TextXAlignment.Center
            
            local optionsFrame = self:CreateFrame(dropdownFrame, UDim2.new(1, 0, 0, 0), UDim2.new(0, 0, 1, 5), self.Theme.MainColor)
            optionsFrame.Visible = false
            
            local isOpen = false
            local selectedOption = options[1] or "Select"
            
            local function toggleDropdown()
                isOpen = not isOpen
                
                if isOpen then
                    optionsFrame.Visible = true
                    TweenService:Create(optionsFrame, TweenInfo.new(0.3), {Size = UDim2.new(1, 0, 0, #options * 30)}):Play()
                    dropdownArrow.Text = "▲"
                else
                    TweenService:Create(optionsFrame, TweenInfo.new(0.3), {Size = UDim2.new(1, 0, 0, 0)}):Play()
                    dropdownArrow.Text = "▼"
                    delay(0.3, function()
                        if not isOpen then
                            optionsFrame.Visible = false
                        end
                    end)
                end
            end
            
            for i, option in ipairs(options) do
                local optionButton = self:Create("TextButton", {
                    Size = UDim2.new(1, -10, 0, 25),
                    Position = UDim2.new(0, 5, 0, (i-1)*30 + 5),
                    BackgroundColor3 = self.Theme.SecondaryColor,
                    Text = option,
                    TextColor3 = self.Theme.TextColor,
                    TextSize = 13,
                    Font = self.Theme.Font,
                    Parent = optionsFrame
                })
                
                self:Create("UICorner", {CornerRadius = UDim.new(0, 4), Parent = optionButton})
                
                optionButton.MouseButton1Click:Connect(function()
                    selectedOption = option
                    dropdownLabel.Text = text .. ": " .. option
                    isOpen = false
                    optionsFrame.Visible = false
                    dropdownArrow.Text = "▼"
                    if callback then
                        callback(option)
                    end
                end)
            end
            
            dropdownFrame.MouseButton1Click:Connect(toggleDropdown)
            
            return {
                Set = function(self, value)
                    if table.find(options, value) then
                        selectedOption = value
                        dropdownLabel.Text = text .. ": " .. value
                    end
                end,
                Get = function(self)
                    return selectedOption
                end
            }
        end
        
        function tabElements:Label(text)
            local elementCount = #tabContent:GetChildren()
            local label = self:CreateLabel(tabContent, text, UDim2.new(1, -20, 0, 20), UDim2.new(0, 10, 0, elementCount * 30 + 10))
            label.TextXAlignment = Enum.TextXAlignment.Center
            return label
        end
        
        -- Обработчик клика по вкладке
        tabButton.MouseButton1Click:Connect(function()
            if currentTab then
                currentTab.Visible = false
            end
            tabContent.Visible = true
            currentTab = tabContent
            
            -- Обновление цветов вкладок
            for _, btn in pairs(content:GetChildren()) do
                if btn:IsA("TextButton") and btn ~= tabButton then
                    btn.BackgroundColor3 = self.Theme.SecondaryColor
                    btn.TextColor3 = self.Theme.DarkText
                end
            end
            tabButton.BackgroundColor3 = self.Theme.AccentColor
            tabButton.TextColor3 = self.Theme.TextColor
        end)
        
        -- Установка первой вкладки как активной
        if not currentTab then
            tabButton.BackgroundColor3 = self.Theme.AccentColor
            tabButton.TextColor3 = self.Theme.TextColor
            tabContent.Visible = true
            currentTab = tabContent
        end
        
        return tabElements
    end
    
    return tabs
end

-- Telegram Invite функция
function DeltaXAzure:TelegramInvite(inviteLink, buttonText)
    local frame = self:CreateFrame(ScreenGui, UDim2.new(0, 280, 0, 50), UDim2.new(1, -300, 1, -70), Color3.fromRGB(0, 136, 204))
    
    local icon = self:CreateLabel(frame, "✈", UDim2.new(0, 30, 1, 0), UDim2.new(0, 10, 0, 0), 18)
    
    local textLabel = self:CreateLabel(frame, "Join Telegram", UDim2.new(0.5, 0, 1, 0), UDim2.new(0, 35, 0, 0), 12)
    
    local joinButton = self:Create("TextButton", {
        Size = UDim2.new(0, 80, 0, 25),
        Position = UDim2.new(0.8, -90, 0.5, -12),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        Text = buttonText or "Join",
        TextColor3 = Color3.fromRGB(0, 136, 204),
        TextSize = 12,
        Font = self.Theme.Font,
        Parent = frame
    })
    
    self:Create("UICorner", {CornerRadius = UDim.new(0, 4), Parent = joinButton})
    
    joinButton.MouseButton1Click:Connect(function()
        if inviteLink then
            pcall(function()
                game:GetService("StarterGui"):SetCore("OpenBrowserWindow", {URL = inviteLink})
            end)
        end
    end)
    
    return frame
end

-- Уведомление
function DeltaXAzure:Notify(title, message, duration)
    duration = duration or 5
    
    local notifyFrame = self:CreateFrame(ScreenGui, UDim2.new(0, 280, 0, 70), UDim2.new(1, -300, 0, 20), self.Theme.MainColor)
    
    local titleLabel = self:CreateLabel(notifyFrame, title, UDim2.new(1, -20, 0, 25), UDim2.new(0, 10, 0, 10), 14)
    titleLabel.Font = Enum.Font.GothamBold
    
    local messageLabel = self:CreateLabel(notifyFrame, message, UDim2.new(1, -20, 0, 35), UDim2.new(0, 10, 0, 30), 12)
    
    -- Автоматическое закрытие
    delay(duration, function()
        TweenService:Create(notifyFrame, TweenInfo.new(0.5), {Position = UDim2.new(1, 300, 0, 20)}):Play()
        wait(0.5)
        notifyFrame:Destroy()
    end)
    
    return notifyFrame
end

return DeltaXAzure
